#!/usr/bin/python
import argparse
import file_index
import index_comparator
import logging
import os
import sys

logger = logging.getLogger(__name__)

# Check arguments and try to load indexes first, so errors can fail fast
def compare(args):
    from_paths = [args.from_path] + args.extra_from_paths
    to_paths = [args.to_path] + args.extra_to_paths

    from_index = file_index.FileIndex("from")
    to_index = file_index.FileIndex("to")

    for path in from_paths:
        from_index.add_path(path)
    for path in to_paths:
        to_index.add_path(path)

    comparator = index_comparator.IndexComparator(from_index, to_index, args.exclude)

    logger.info("From: {}".format(from_index))
    logger.info("To  : {}".format(to_index))

    comparator.compare()

    comparator.print_changes(args.show_changes, args.hide_change_type)

def index(args):
    if not os.path.isdir(args.directory):
        raise IOError("{} is not a directory".format(args.directory))
    if not args.force and os.path.exists(args.index_file):
        raise IOError("{} already exists. Add -f to overwrite.".format(args.index_file))

    logger.info("Indexing {}".format(args.directory))

    index = file_index.FileIndex()
    message = " ".join(args.message) if args.message is not None else None
    index.scan_dir(args.directory, message)
    index.save(args.index_file)

def execute_command_line():
    parser = argparse.ArgumentParser(description = "directory diff - compare changes in files between two directories")

    base_subparser = argparse.ArgumentParser(add_help = False)
    base_subparser.add_argument("--exclude", action = "append", help = "Glob for files to exclude. Can be specified multiple times.")
    base_subparser.add_argument("-v", "--verbose", action = "count", help = "Log INFO messages if specified once. Log DEBUG messages if specified twice.")

    subparsers = parser.add_subparsers()

    parser_compare = subparsers.add_parser("compare", help = "Compare two directories", parents=[base_subparser])
    parser_compare.add_argument("from_path", help = "Directory or index to compare changes from")
    parser_compare.add_argument("to_path", help = "Directory or index to compare changes to")
    parser_compare.add_argument("--extra-from-paths", nargs = "+", default = [], help = "Extra directories or indexes to compare changes from")
    parser_compare.add_argument("--extra-to-paths", nargs = "+", default = [], help = "Extra directories or indexes to compare changes to")
    parser_compare.add_argument("-n", "--hide-change-type", action = "store_true", help = "Hide change type, only list files")

    parser_compare.add_argument("-i", "--show-identical", const = index_comparator.Change.Type.IDENTICAL,
        action = "append_const", dest = "show_changes", help = "Show identical files")
    parser_compare.add_argument("-m", "--show-moved", const = index_comparator.Change.Type.MOVED,
        action = "append_const", dest = "show_changes", help = "Show moved files")
    parser_compare.add_argument("-c", "--show-changed", const = index_comparator.Change.Type.CHANGED,
        action = "append_const", dest = "show_changes", help = "Show changed files")
    parser_compare.add_argument("-d", "--show-deleted", const = index_comparator.Change.Type.DELETED,
        action = "append_const", dest = "show_changes", help = "Show deleted files")
    parser_compare.add_argument("-a", "--show-added", const = index_comparator.Change.Type.ADDED,
        action = "append_const", dest = "show_changes", help = "Show added files")
    parser_compare.add_argument("-u", "--show-duplicated", const = index_comparator.Change.Type.DUPLICATED,
        action = "append_const", dest = "show_changes", help = "Show duplicated files")
    parser_compare.add_argument("-e", "--show-deduplicated", const = index_comparator.Change.Type.DUPLICATED,
        action = "append_const", dest = "show_changes", help = "Show deduplicated files")

    parser_compare.set_defaults(func = compare)

    parser_index = subparsers.add_parser("index", help = "Index directory and save to file", parents=[base_subparser])
    parser_index.add_argument("directory", help = "Directory to index")
    parser_index.add_argument("index_file", nargs = "?", default = "index.did", help = "File to store index in")
    parser_index.add_argument("-f", "--force", action = "store_true", help = "Force overwriting of existing index file")
    parser_index.add_argument("-m", "--message", nargs = "+", help = "Message to be stored in index file")
    parser_index.set_defaults(func = index)

    args = parser.parse_args()

    if len(sys.argv) == 1:
        parser.print_help()
        parser.exit()

    if args.verbose is None:
        logging.basicConfig(level = logging.WARNING)
    elif args.verbose == 1:
        logging.basicConfig(level = logging.INFO)
    elif args.verbose >= 2:
        logging.basicConfig(level = logging.DEBUG)

    args.func(args)

if __name__ == '__main__':
    execute_command_line()
