#!/usr/bin/python
import argparse
import file_index
import index_comparator
import logging
import os
import sys

logger = logging.getLogger(__name__)

# Check arguments and try to load indexes first, so errors can fail fast
def compare(args):
    # Returns True if did index, False if directory, raises exception if invalid
    def is_did_index(path):
        if os.path.isdir(path):
            return False
        if not os.path.isfile(path):
            raise IOError("{} does not exist".format(path))
        return True

    paths = [args.first, args.second]

    is_did_index = [is_did_index(p) for p in paths]

    indexes = [file_index.FileIndex("old"), file_index.FileIndex("new")]
    comparator = index_comparator.IndexComparator(*indexes, excludes = args.exclude)

    for i, index in enumerate(indexes):
        if is_did_index[i]:
            index.load(paths[i])

    for i, index in enumerate(indexes):
        if not is_did_index[i]:
            index.scan_dir(paths[i])

    logger.info("Comparing changes from {} to {}".format(*paths))
    logger.info("From: {}".format(indexes[0]))
    logger.info("To  : {}".format(indexes[1]))

    comparator.compare()

    show_args = {
        "show_identical": args.show_identical,
        "show_moved":     args.show_moved,
        "show_added":     args.show_added,
        "show_changed":   args.show_changed,
        "show_deleted":   args.show_deleted,
    }
    if not any([arg for arg in show_args.values()]):
        show_args["show_changed"] = True
        show_args["show_deleted"] = True
        show_args["show_added"] = True
    comparator.print_changes(**show_args)

def index(args):
    if not os.path.isdir(args.directory):
        raise IOError("{} is not a directory".format(args.directory))
    if not args.force and os.path.exists(args.index_file):
        raise IOError("{} already exists. Add -f to overwrite.".format(args.index_file))

    logger.info("Indexing {}".format(args.directory))

    index = file_index.FileIndex()
    message = " ".join(args.message) if args.message is not None else None
    index.scan_dir(args.directory, message)
    index.save(args.index_file)

def execute_command_line():
    parser = argparse.ArgumentParser(description = "directory diff - compare changes in files between two directories")

    base_subparser = argparse.ArgumentParser(add_help = False)
    base_subparser.add_argument("--exclude", action = "append", help = "Glob for files to exclude. Can be specified multiple times.")
    base_subparser.add_argument("-v", "--verbose", action = "count", help = "Log INFO messages if specified once. Log DEBUG messages if specified twice.")

    subparsers = parser.add_subparsers()

    parser_compare = subparsers.add_parser("compare", help = "Compare two directories", parents=[base_subparser])
    parser_compare.add_argument("first", help = "First directory or index file")
    parser_compare.add_argument("second", help = "Second directory or index file")
    parser_compare.add_argument("-i", "--show-identical", action = "store_true", help = "Show identical files")
    parser_compare.add_argument("-m", "--show-moved", action = "store_true", help = "Show moved files")
    parser_compare.add_argument("-c", "--show-changed", action = "store_true", help = "Show changed files")
    parser_compare.add_argument("-d", "--show-deleted", action = "store_true", help = "Show deleted files")
    parser_compare.add_argument("-a", "--show-added", action = "store_true", help = "Show added files")
    parser_compare.set_defaults(func = compare)

    parser_index = subparsers.add_parser("index", help = "Index directory and save to file", parents=[base_subparser])
    parser_index.add_argument("directory", help = "Directory to index")
    parser_index.add_argument("index_file", nargs = "?", default = "index.did", help = "File to store index in")
    parser_index.add_argument("-f", "--force", action = "store_true", help = "Force overwriting of existing index file")
    parser_index.add_argument("-m", "--message", nargs="+", help = "Message to be stored in index file")
    parser_index.set_defaults(func = index)

    args = parser.parse_args()

    if len(sys.argv) == 1:
        parser.print_help()
        parser.exit()

    if args.verbose is None:
        logging.basicConfig(level = logging.WARNING)
    elif args.verbose == 1:
        logging.basicConfig(level = logging.INFO)
    elif args.verbose >= 2:
        logging.basicConfig(level = logging.DEBUG)

    args.func(args)

if __name__ == '__main__':
    execute_command_line()
